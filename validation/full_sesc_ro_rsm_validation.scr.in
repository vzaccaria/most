set number_of_scenarios = 12
drv_load_driver "st_sesc"

# FULL SEARCH DB
#set ics_bounds =    	[ "2K", "16K" ]
#set dcs_bounds =    	[ "2K", "16K" ]
#set l2cs_bounds=    	[ "32K", "256K" ]
#set icw_bounds  =    	[ "1w", "8w" ]
#set dcw_bounds  =    	[ "1w", "8w" ]
#set l2cw_bounds  =    	[ "1w", "8w" ]
#set iwidth_bounds=  	[ "1", "8" ]
#set cbs_bounds =   	[ "16B", "32B" ]
#set pn_bounds =    	[ "2", "16" ]
#
# However, this was the design space used for the SASP paper (multiple in fact):
#
#set ics_bounds =    	[ "2K", "16K" ]
#set dcs_bounds =    	[ "2K", "16K" ]
#set l2cs_bounds=    	[ "32K", "256K" ]
#set icw_bounds  =    	[ "1w", "4w" ]
#set dcw_bounds  =    	[ "1w", "8w" ]
#set l2cw_bounds  =    	[ "1w", "8w" ]
#set iwidth_bounds=  	[ "1", "8" ]
#set cbs_bounds =   	[ "16B", "16B" ]
#set pn_bounds =    	[ "2", "8" ]
#set dcw_bounds_v    =  { ["1w", "4w"],    ["1w", "8w"]     }
#set l2cw_bounds_v   =  { ["1w", "4w"],    ["1w", "8w"]     }
#set ics_bounds_v   =  { [ "4K", "16K" ], ["2K", "16K"]     }

# During the analysis for TCAD 09, we used the same DS as the MPEG decoder with max 8 processors 
# Just a shortcut for the RSM tune. We use this design space also for the validation of RSMS.

set ics_bounds =    	[ "2K", "16K" ]
set dcs_bounds =    	[ "2K", "16K" ]
set l2cs_bounds=    	[ "32K", "256K" ]
set icw_bounds  =    	[ "1", "4" ]
set dcw_bounds  =    	[ "1", "4" ]
set l2cw_bounds  =      [ "2", "4" ]
set iwidth_bounds=  	[ "1", "8" ]
set cbs_bounds =   	[ "16", "16" ]
set pn_bounds =    	[ "2", "8" ]



set progress=true
db_read "@bdir@/examples/ro_sesc/fullSESC_RO.db" --destination="root"
db_filter_valid "root"


set ins_for_app = [  7507294.000, 1881814.000, 684472.000, 9623162.000, 4203374.000, 2387344.000, 41551696.000, 20484224.000, 10773940.000, 6972904.000, 1591678.000, 576064.000 ]

set_function real_pn(x) = 2*pow(2, pn($x)-level("pn","2"))
set_function icache_size(x) = 2048*pow(2, ics($x)-level("ics","2K"))
set_function dcache_size(x) = 2048*pow(2, dcs($x)-level("dcs","2K"))
set_function l2cache_size(x) = 32768*pow(2, l2cs($x)-level("l2cs","32K"))
set_function total_cache_size(x) = real_pn($x)*(icache_size($x)+dcache_size($x)+l2cache_size($x))

set frequency_Hz = 1000000000
set_function time_s(configuration, app) = metrics($configuration)@(2*$app+1)/$frequency_Hz
set_function mips(configuration, app) = $ins_for_app@$app/1000000/time_s($configuration, $app)
set_function power_mW(configuration, app) = 1000*metrics($configuration)@(2*$app)/time_s($configuration, $app)

set_objective time_mus(x) = geomavg(i, 0, 11, time_s($x,$i)*1000000)
set_objective mW_over_mips(x) = geomavg(i, 0, 11, power_mW($x,$i)/mips($x,$i))
#set_constraint time_mus(x) = geomavg(i, 0, 11, time_s($x,$i)*1000000)/2000 < 1
set_constraint total_cache_size(x) = (total_cache_size($x)/1100000) < 1
#set_constraint mw_over_mips(x) = geomavg(i, 0, 11, power_mW($x,$i)/mips($x,$i))/30 < 1

set db_report_conf_col_size = 50
set db_report_metric_col_size = 20 

set local_parallelism = 8

# total cache area mm^2
set area_per_B = 12.5/(1024*1024)
set_function total_cache_area(x) = total_cache_size($x)*$area_per_B

# total cores area mm^2
set_function processor_area(x) = 11.52 *(real_iwidth($x) * 0.17 + 0.32) 
set_function total_cores_area(x) = real_pn($x)*processor_area($x)

# xbar_area mm^2
set_function xbar_area(x) = real_pn($x)*0.75 + 2.6

# TOTAL AREA
set_function total_configuration_area(x) = total_cache_area($x) + total_cores_area($x) + xbar_area($x)

opt_load_optimizer "st_parallel_doe"

#set max_random_doe_solutions_number = 2000
set min_random_doe_solutions_number = 200
set max_random_doe_solutions_number = 2000
set random_step = 200

set preprocess_list = { -1.0, "log", 0.5, 1.0 }

set num_samples = 5 
# set preprocess_list = { 1.0 }

#set silent = true


#              (* name="nn"  model_name="NN_ON_DOE"  par1="fast" 	par2="" par3="" *),
#	       (* name="rbf" model_name="RBF_ON_DOE" par1="power" 	par2=1 	par3="linear" *), 
#               (* name="rbf" model_name="RBF_ON_DOE" par1="power_log" 	par2=2  par3="thin-spline" *), 
#	       (* name="rbf" model_name="RBF_ON_DOE" par1="srt" 	par2=2  par3="multi" *), 
#   	       (* name="rbf" model_name="RBF_ON_DOE" par1="inv_sqrt" 	par2=1  par3="inv_multi" *), 
#               (* name="rbf" model_name="RBF_ON_DOE" par1="exp" 	par2=1 	par3="gaussian" *),
#	       (* name="rbf" model_name="SHEPARD"    par1=2 par2="" par3=""*),
#	       (* name="shp" model_name="SHEPARD"    par1=3 par2="" par3="" *),
#	       (* name="shp" model_name="SHEPARD"    par1=5 par2="" par3="" *),

set_procedure train_model(model_config, source_db, pre, dest_db)
	doe_load_doe "st_full_search"
	if($model_config@"model_name" == "NN_ON_DOE")
		db_train_rsm $dest_db --source=$source_db --model="NN_ON_DOE" --effort=$model_config@"par1" --preprocess=$pre 
	endif
	if($model_config@"model_name" == "RBF_ON_DOE")
		db_train_rsm $dest_db --source=$source_db --model="RBF_ON_DOE" --type=($model_config@"par1") --parameter=($model_config@"par2") --preprocess=$pre
	endif
	if($model_config@"model_name" == "SHEPARD")
		db_train_rsm $dest_db --source=$source_db --model="SHEPARD" --power=($model_config@"par1") --preprocess=$pre
	endif
	if($model_config@"model_name" == "LINEAR")
		db_train_rsm $dest_db --source=$source_db --model="LINEAR" --order=($model_config@"par1") --interaction=($model_config@"par2") --exclude=$model_config@"exclude" --preprocess=$pre
	endif
	if($model_config@"model_name" == "SPLINE_ON_DOE")
		db_train_rsm $dest_db --source=$source_db --model="SPLINE_ON_DOE" --preprocess=$pre
	endif
done

set_procedure generate_plot(prefix, the_models)
	set plotr  = { } 
	set plote  = { } 
	foreach m in $the_models
		foreach p in $preprocess_list
				set k = 0
				set random_doe_solutions_number = $min_random_doe_solutions_number 
				set vr = [ ] 
				set ve = [ ] 
				set sim = [ ] 
				while ($random_doe_solutions_number < $max_random_doe_solutions_number)
					set s = 0
					while($s < $num_samples)
						doe_load_doe "st_random"
						opt_tune "RAND_SAMPLE"
						doe_load_doe "st_full_search"
						train_model($m, "RAND_SAMPLE", $p, "PREDICTION")
						db_report "PREDICTION" --only_size=true
						db_write "PREDICTION" --file_name="prediction-"+$k+".db"
						set err = compute_norm_avg_error("PREDICTION", "root")
						set aerr = avg(i,0,23,$err@$i) 

						set e_tuple = [ $random_doe_solutions_number, $aerr ] 
						set ve@$k = $e_tuple

						set k = $k+1
						set s = $s + 1
						set i = $i + 1
					done
					set random_doe_solutions_number = $random_doe_solutions_number + $random_step 
				done
				set name = $m@"name"+"-"+$m@"par1"+"-"+$m@"par2"+"-"+$m@"par3"+"-box="+$p
				set bins = to_bins($ve, $min_random_doe_solutions_number, $max_random_doe_solutions_number, $random_step)
				set bav = bin_avg($bins)
				set plote = $plote + {[ $bav@0, $bav@1, $name ]} 
		done
	done
	db_plot_vector $plote  --monochrome=true --xaxis="Number of simulations" --yaxis="Average normalized error" --title="" --output=$prefix+"-err-nsim-curr-rsms" --onepage=true --graphic="linespoints"
done
			
set models = { (* prefix="linear" data={ (* name="lin" model_name="LINEAR"  par1=1 par2=true par3="high" exclude={} *), (* name="lin" model_name="LINEAR"  par1=2 par2=false  par3="medium" exclude={"icw", "dcw", "l2cw"} *) } *), (* prefix="rbf" data={ (* name="rbf" model_name="RBF_ON_DOE" par1="power_log"  par2=2  par3="thin-spline" *) } *), (* prefix="shepard" data={ (* name="shp" model_name="SHEPARD"    par1=5 par2="" par3="" *) } *), (* prefix="nn" data={ (* name="nn"  model_name="NN_ON_DOE"  par1="fast"        par2="" par3="" *) } *), (* prefix="spline" data = { (* name="spl" model_name="SPLINE_ON_DOE"     par1="" par2="" par3="" *) } *) }

set i = 0

foreach m in $models
	generate_plot($m@"prefix", $m@"data")
done



