# OBSOLETE!

# Makefile for MOST 
# 
# (C) 2007-2011, Politecnico di Milano and V. Zaccaria

DSTDIR = @dstdir@
SRCDIR = @srcdir@/src
INCDIR = @srcdir@/src

## The following flags are for the most binary
CXXFLAGS = @cxxflags@ -fPIE -I$(INCDIR) -I. 
LINKFLAGS = @linkflags@ -lpthread -ldl -rdynamic -lpthread -lstdc++ @xmllinkflags@

## The following flags are for .so libraries
OTHERCXXFLAGS = @othercxxflags@ -I$(INCDIR) -I.
OTHERLINKFLAGS = @otherlinkflags@
CXXSOFLAGS = -g -shared -fPIC 

## The following is for the XML driver.
XMLCXXFLAGS = @xmlcxxflags@
XMLLINKFLAGS = @xmllinkflags@

IMAGE = @image@
STATIC = @static@

BUILDNN=@buildnn@
BUILDRBF=@buildrbf@
BUILDGPL=@buildgpl@
BUILDSPLINES=@buildsplines@
BUILDM3=@buildm3@

CXX=clang++
MPICXX=mpic++
AR=ar cr
RANLIB=ranlib
SHLIB_LD=g++ -fPIC


OS_NAME = $(shell uname -s)

BINR=555
OTHR=444

#####################################
#     CREATE SYMBOLIC TARGETS       #
#####################################


STSHELL_TARGETS = st_commands.o st_env.o st_point.o st_sim_utils.o st_database.o st_grammar.o st_map.o st_opt_utils.o st_tokens.o st_object.o st_shell.o st_vector.o st_driver_utils.o st_parser.o st_shell_variables.o st_list.o st_object_utils.o st_arg.o st_common_utils.o st_ast.o st_job_dispatcher.o st_mpi_utils.o st_doe_utils.o st_rsm.o st_objectives_constraints.o st_xdr_api.o st_companion_metrics.o st_design_space.o st_rand.o st_exception.o st_lm.o st_sign.o st_signal.o st_shell_command.o st_rsm_help.o st_lm_utils.o st_gen_man.o st_conv.o

STSHELL_INCLUDES = st_commands.h st_driver_utils.h st_list.h st_object_utils.h st_parser.h st_shell_variables.h st_database.h st_env.h st_map.h st_opt_utils.h st_point.h st_sim_utils.h st_driver.h st_object.h st_optimizer.h st_vector.h st_arg.h st_common_utils.h st_ast.h st_job_dispatcher.h st_mpi_utils.h st_doe.h st_doe_utils.h st_rsm.h st_xdr_api.h st_companion_metrics.h st_objectives_constraints.h st_command_list.h st_design_space.h st_rand.h st_exception.h st_shell_command.h st_conv.h

STSHELL_INCDIR_INCLUDES = $(patsubst %.h, $(INCDIR)/%.h, $(STSHELL_INCLUDES))

OPTIMIZERS_SRC = libst_parallel_doe.cc libst_parallel_pareto_doe.cc libst_mosa.cc libst_parallel_steepest_descent.cc libst_nsgaii.cc
OPTIMIZERS_TARGET = $(patsubst %.cc, %.so, $(OPTIMIZERS_SRC))

#DRIVERS_SRC = libst_test.cc libst_dtlz.cc libst_wattch.cc libst_sesc.cc 
DRIVERS_SRC = libst_sesc.cc libst_test.cc libst_xml.cc libst_generic.cc
DRIVERS_TARGET = $(patsubst %.cc, %.so, $(DRIVERS_SRC))

DOE_SRC = libst_full_search.cc libst_random.cc libst_random_effect.cc libst_full_factorial.cc libst_neighbor.cc libst_replicate.cc libst_box_behnken.cc libst_ccd_fc.cc libst_full_factorial_extended.cc libst_scrambled_doe.cc libst_plackett_burman.cc
#libst_fractional_factorial.cc 
DOE_TARGET = $(patsubst %.cc, %.so, $(DOE_SRC))

# Tells make to search for sources into SRCDIR, SRCDIR/optimizers and SRCDIR/drivers
VPATH=$(SRCDIR):$(SRCDIR)/optimizers:$(SRCDIR)/drivers:$(SRCDIR)/doe:$(SRCDIR)/../scripts/sdk_xml

TARGET = most 
DAEMON_TARGET = mostd 
SDAEMON_TARGET = smostd 
OTH_TARGET = m3_convert libxml_m3.a 
M3EXP_TARGET = m3explorer

#####################################
#     CREATE BUILD TARGETS          #
#####################################


ifeq ("$(BUILDM3)","yes")
all: $(TARGET) $(OPTIMIZERS_TARGET) $(DRIVERS_TARGET) $(DOE_TARGET) $(DAEMON_TARGET) $(SDAEMON_TARGET) $(OTH_TARGET) $(M3EXP_TARGET) 
else
all: $(TARGET) $(OPTIMIZERS_TARGET) $(DRIVERS_TARGET) $(DOE_TARGET) $(DAEMON_TARGET) $(SDAEMON_TARGET) $(OTH_TARGET) 
endif


#############################
#       ENGINE BUILD	    #
#############################

most: $(STSHELL_TARGETS) 
	$(MPICXX) $(STATIC) $^ -o $@ $(LINKFLAGS) -lssl -lcrypto

st_mpi_utils.o: st_mpi_utils.cc
	$(MPICXX) -c  $< -o $@ $(CXXFLAGS) -I.

%.o: %.cc $(STSHELL_INCDIR_INCLUDES)
	$(CXX) -c  -I$(DSTDIR) $< -o $@ $(CXXFLAGS) 

%.so: %.cc $(STSHELL_INCDIR_INCLUDES)
	$(CXX) $< -o $@ $(CXXSOFLAGS) $(OTHERCXXFLAGS) $(OTHERLINKFLAGS)

libst_xml.so: libst_xml.cc $(STSHELL_INCDIR_INCLUDES)
	$(CXX) $< -o $@ $(CXXSOFLAGS) $(OTHERCXXFLAGS) $(OTHERLINKFLAGS) $(XMLCXXFLAGS) $(XMLLINKFLAGS)

libxml_m3.a: libxml_m3.o
	ar rcs $@ $< 

st_grammar.o: $(SRCDIR)/st_grammar.yy 
	cp $(SRCDIR)/st_grammar.yy .
	bison -d st_grammar.yy -o bof.cc
	cp bof*h* st_grammar.h
	cp bof*cc st_grammar.cc
	$(CXX) -c  st_grammar.cc -o $@ -DYYERROR_VERBOSE $(CXXFLAGS) -I.

st_tokens.o: $(SRCDIR)/st_tokens.ll 
	flex $(SRCDIR)/st_tokens.ll
	mv lex.yy.c st_tokens.cc
	$(CXX) -c  st_tokens.cc -o $@ -I. -DYYERROR_VERBOSE $(CXXFLAGS) 

m3_convert: $(SRCDIR)/m3_scan.ll
	flex $(SRCDIR)/m3_scan.ll
	mv lex.yy.c m3_scan.c
	$(CXX) -o m3_convert m3_scan.c -lfl

mostd: $(SRCDIR)/st_lm.h $(SRCDIR)/st_mostd.cc st_sign.o st_lm_utils.o
	$(CXX) $(SRCDIR)/st_mostd.cc st_sign.o st_lm_utils.o -o mostd $(CXXFLAGS) $(LINKFLAGS) -lssl -lcrypto

smostd: $(SRCDIR)/st_lm.h $(SRCDIR)/st_smostd.cc st_sign.o st_lm_utils.o
	$(CXX) $(SRCDIR)/st_smostd.cc st_sign.o -o smostd st_lm_utils.o $(CXXFLAGS) $(LINKFLAGS) -lssl -lcrypto

st_gen_man.o: $(SRCDIR)/st_gen_man.cc 
	$(CXX) -c -o st_gen_man.o $(SRCDIR)/st_gen_man.cc  $(CXXFLAGS) -I. -D__ST_GEN_MAN__ 

#############################
#       CLEAN BUILD	    #
#############################

distclean: clean
	rm -f makefile.gpl makefile config.status makefile.nn makefile.rbf makefile.splines 

clean:
	rm -f *.o $(TARGET) *.cc st_grammar.h *.so do_tests* *.xml ${DAEMON_TARGET} ${SDAEMON_TARGET} ${OTH_TARGET} *.sh *.scr validate_* create_makefile m3_cdb m3_scan.c st_grammar.yy bof.hh config.h nn normal rbf_interpolator regressor rand sh_i spline *.db test*_output* *_input *_output most.node* *.pdf *.txt *.tex

ifeq ("$(OS_NAME)", "Darwin")
dist:
	tar --directory $(SRCDIR)/../.. -c -v -z -f stshell_@snapshot@.tar.gz stshell --exclude "*.svn*" 
endif

ifeq ("$(OS_NAME)", "Linux")
dist:
	tar --exclude="*.svn*" --directory $(SRCDIR)/../.. -c -v -z -f stshell_@snapshot@.tar.gz stshell

#############################
#    REDHAT BUILD SOURCE    #
#############################

rhdistlocal:
	tar --exclude="*.svn*" --exclude="most-@releasenamen@.tar.gz" --exclude="use_cases" --exclude="redhat" --exclude="build" --directory $(SRCDIR)/../.. -c -v -z -f most-@releasenamen@.tar.gz stshell_mexp

rhdist:
	tar --exclude="*.svn*" --exclude="most-@releasenamen@.tar.gz" --exclude="use_cases" --exclude="redhat" --exclude="build" --directory $(SRCDIR)/../.. -c -v -z -f most-@releasenamen@.tar.gz @snapshot@ 
endif

ifeq ("$(OS_NAME)", "Darwin")
bin-dist:
	tar --directory $(IMAGE)/.. -c -v -z -f most_@snapshot@_darwin_$(shell uname -r)_bin.tar.gz $(shell cd $(IMAGE) && pwd | xargs basename) --exclude "*.svn*" 
endif

ifeq ("$(OS_NAME)", "Linux")
bin-dist: install docs
	tar --exclude="*.svn*" --directory $(IMAGE)/.. -c -v -z -f most_@snapshot@_linux_$(shell uname -r)_bin.tar.gz $(shell cd $(IMAGE) && pwd | xargs basename) 
endif

install_docs: install 
	make docs

docs-dist: install_docs
	tar --exclude="*.svn*" --directory $(IMAGE) -c -v -z -f most_@snapshot@_docs.tar.gz docs

docs: install 
	mkdir -p ~/.fonts
	cp $(SRCDIR)/../docs/fonts/* ~/.fonts
	rm -f manual.txt
	rm -f manual_rsm.txt
	rm -f manual_optimizers.txt
	rm -f manual_doe.txt
	sed "s?@release@?@releasename@?g" $(SRCDIR)/../docs/tools/mmd/XSLT/my_latex.xslt.in > $(SRCDIR)/../docs/tools/mmd/XSLT/my_latex.xslt
	$(IMAGE)/bin/most --generate_manual
	echo "Title: 			Command Line Manual" > header.txt
	echo "Title: 			RSM Command Line Manual" > rsm_header.txt
	echo "Title: 			Optimization Modules Manual" > opt_header.txt
	echo "Title: 			Design Of Experiments Modules Manual" > doe_header.txt
	echo "CSS: 			template.css" > header2.txt
	echo "Base Header level: 	3" >> header2.txt
	echo "Format: 			complete" >> header2.txt
	echo "LaTeX XSLT: 		my_xelatex.xslt" >> header2.txt
	echo "" >> header2.txt
	echo "" >> header2.txt
	cat header.txt header2.txt manual.txt > manualp.txt
	cat rsm_header.txt header2.txt manual_rsm.txt > manualr.txt
	cat opt_header.txt header2.txt manual_optimizers.txt > manualo.txt
	cat doe_header.txt header2.txt manual_doe.txt > manuald.txt
	$(SRCDIR)/../docs/tools/mmd/bin/txt2pdf manualp.txt > /dev/null 2>&1
	install -m $(OTHR) $(DSTDIR)/manualp.pdf 	$(IMAGE)/docs/most_command_line_manual_@releasename@.pdf
	$(SRCDIR)/../docs/tools/mmd/bin/txt2pdf manualr.txt > /dev/null 2>&1
	install -m $(OTHR) $(DSTDIR)/manualr.pdf 	$(IMAGE)/docs/most_rsm_command_line_manual_@releasename@.pdf
	$(SRCDIR)/../docs/tools/mmd/bin/txt2pdf manualo.txt > /dev/null 2>&1
	install -m $(OTHR) $(DSTDIR)/manualo.pdf 	$(IMAGE)/docs/most_opt_command_line_manual_@releasename@.pdf
	$(SRCDIR)/../docs/tools/mmd/bin/txt2pdf manuald.txt > /dev/null 2>&1
	install -m $(OTHR) $(DSTDIR)/manuald.pdf 	$(IMAGE)/docs/most_doe_command_line_manual_@releasename@.pdf
	cp $(SRCDIR)/../docs/most.txt 			$(DSTDIR)
	cp $(SRCDIR)/../docs/*.png			$(DSTDIR)
	$(SRCDIR)/../docs/tools/mmd/bin/txt2pdf 	$(DSTDIR)/most.txt > /dev/null 2>&1
	install -m $(OTHR) $(DSTDIR)/most.pdf 		$(IMAGE)/docs/most_overview_@releasename@.pdf
	cp $(SRCDIR)/../docs/installation.txt 		$(DSTDIR)
	$(SRCDIR)/../docs/tools/mmd/bin/txt2pdf 	$(DSTDIR)/installation.txt > /dev/null 2>&1
	install -m $(OTHR) $(DSTDIR)/installation.pdf 	$(IMAGE)/docs/most_installation_@releasename@.pdf
	cp $(SRCDIR)/../docs/installation_redhat.txt 		$(DSTDIR)
	$(SRCDIR)/../docs/tools/mmd/bin/txt2pdf 	$(DSTDIR)/installation_redhat.txt > /dev/null 2>&1
	install -m $(OTHR) $(DSTDIR)/installation_redhat.pdf 	$(IMAGE)/docs/most_installation_redhat_@releasename@.pdf
	cp $(SRCDIR)/../docs/most_xml.txt 		$(DSTDIR)
	$(SRCDIR)/../docs/tools/mmd/bin/txt2pdf 	$(DSTDIR)/most_xml.txt > /dev/null 2>&1
	install -m $(OTHR) $(DSTDIR)/most_xml.pdf 	$(IMAGE)/docs/most_xml_interface_@releasename@.pdf

#############################
#      INSTALL MEXP         #
#############################

m3explorer: 
	@mkdir -p $(DSTDIR)/m3build



#############################
#      INSTALL BUILD	    #
#############################

license:
	$(IMAGE)/bin/install_license.sh $(SRCDIR)/../tools/license_manager/test_license.lic.license --image=$(IMAGE)


install: all 
	@mkdir -p $(IMAGE)
	@mkdir -p $(IMAGE)/bin
	@mkdir -p $(IMAGE)/lib
	@mkdir -p $(IMAGE)/scripts
	@mkdir -p $(IMAGE)/tests
	@mkdir -p $(IMAGE)/tests/xml
	@mkdir -p $(IMAGE)/packages
	@mkdir -p $(IMAGE)/examples
	@mkdir -p $(IMAGE)/schemas
	@mkdir -p $(IMAGE)/validation
	@mkdir -p $(IMAGE)/man
	@mkdir -p $(IMAGE)/docs
	@mkdir -p $(IMAGE)/sdk
	@mkdir -p $(IMAGE)/share
	@mkdir -p $(IMAGE)/xml_sdk
	@mkdir -p $(IMAGE)/examples/mpeg_sesc
	@mkdir -p $(IMAGE)/examples/ro_sesc
	@mkdir -p $(IMAGE)/scripts/sesc_stub 
	@mkdir -p $(IMAGE)/scripts/mmd
	install -m $(BINR) $(DSTDIR)/*.so $(IMAGE)/lib
	install -m $(BINR) $(DSTDIR)/do_tests $(IMAGE)/tests
	install -m $(BINR) $(DSTDIR)/do_tests_sim $(IMAGE)/tests
	install -m $(OTHR) $(SRCDIR)/../schemas/*.xsd $(IMAGE)/schemas
	install -m $(BINR) $(DSTDIR)/create_makefile $(IMAGE)/sdk
	install -m $(BINR) $(DSTDIR)/install_license.sh $(IMAGE)/bin
	install -m $(BINR) $(SRCDIR)/../scripts/sesc_stub/* $(IMAGE)/scripts/sesc_stub
	install -m $(BINR) $(SRCDIR)/../man/*.src $(IMAGE)/man
	install -m $(BINR) $(SRCDIR)/../scripts/sdk/makefile.in $(IMAGE)/sdk
	install -m $(BINR) $(SRCDIR)/../packages/* $(IMAGE)/packages
	install -m $(BINR) $(SRCDIR)/../scripts/sdk_xml/xml_* $(IMAGE)/xml_sdk
	install -m $(BINR) $(SRCDIR)/../scripts/sdk_xml/*.h $(IMAGE)/xml_sdk
	install -m $(BINR) $(DSTDIR)/libxml_m3.a $(IMAGE)/xml_sdk
	install -m $(BINR) $(SRCDIR)/../scripts/jobcontrol/timeout.scr $(IMAGE)/bin 
	install -m $(OTHR) $(SRCDIR)/../docs/tools/cman/mmd.sed $(IMAGE)/scripts/mmd
	install -m $(OTHR) $(SRCDIR)/drivers/libst_sesc.cc $(IMAGE)/examples/libst_sesc.cc
	install -m $(OTHR) $(SRCDIR)/optimizers/libst_nsgaii.cc $(IMAGE)/examples/libst_nsgaii.cc
	cd $(IMAGE)/examples && $(IMAGE)/sdk/create_makefile libst_sesc.cc --suffix=sesc --image=$(IMAGE) --fdebpack
	cd $(IMAGE)/examples && $(IMAGE)/sdk/create_makefile libst_nsgaii.cc --suffix=nsgaii --image=$(IMAGE) --fdebpack
#	FIXME: turn on the following! 
	install -m $(OTHR) $(SRCDIR)/../examples/mpeg_sesc/* $(IMAGE)/examples/mpeg_sesc
	install -m $(OTHR) $(SRCDIR)/../examples/ro_sesc/* $(IMAGE)/examples/ro_sesc
# 	install -m $(BINR) $(SRCDIR)/../scripts/sesc_ro/*.scr $(IMAGE)/examples/sesc_ro
# 	install -m $(BINR) $(SRCDIR)/../scripts/sesc_ro/*.bz2 $(IMAGE)/examples/sesc_ro
	install -m $(BINR) $(DSTDIR)/validate_rsm $(IMAGE)/validation
	install -m $(BINR) $(DSTDIR)/validate_optimizers $(IMAGE)/validation
	install -m $(BINR) $(DSTDIR)/full_sesc_ro_rsm_validation.scr $(IMAGE)/validation
	install -m $(BINR) $(DSTDIR)/meth_design_space.scr $(IMAGE)/validation
	install -m $(BINR) $(DSTDIR)/mosa_validation.scr $(IMAGE)/validation
	install -m $(BINR) $(DSTDIR)/nsgaii_validation.scr $(IMAGE)/validation
	install -m $(BINR) $(DSTDIR)/respir_validation.scr $(IMAGE)/validation
	@mkdir -p $(IMAGE)/include
	install -m $(BINR) $(DSTDIR)/most $(IMAGE)/bin
	install -m $(BINR) $(DSTDIR)/mostd $(IMAGE)/bin
	install -m $(BINR) $(DSTDIR)/smostd $(IMAGE)/bin
	install -m $(BINR) $(DSTDIR)/mostd.sh $(IMAGE)/bin/lmostd.sh
	@for hdr in $(INCDIR)/*.h ; do \
          if cmp -s $$hdr $(IMAGE)/include/`basename $$hdr`; then : ; else \
            echo "Installing $$hdr to $(IMAGE)/include"; \
            install -m $(OTHR) $$hdr $(IMAGE)/include; \
          fi; \
        done
	tar --directory $(SRCDIR)/.. --exclude="*.svn*" --exclude="*.in" --exclude="*xml*" -c -f - tests | (cd $(IMAGE); tar xfp -)
	install -m $(BINR) $(DSTDIR)/do_tests.x $(IMAGE)/tests/xml
	cp $(SRCDIR)/../tests/xml/*.ref $(IMAGE)/tests/xml
	cp $(SRCDIR)/../tests/xml/*.py $(IMAGE)/tests/xml
	cp $(SRCDIR)/../tests/xml/*.scr $(IMAGE)/tests/xml
	cp $(DSTDIR)/*.xml $(IMAGE)/tests/xml
	install -m $(BINR) $(DSTDIR)/m3_cdb $(IMAGE)/bin
	install -m $(BINR) $(DSTDIR)/m3_convert $(IMAGE)/bin
	if test -e makefile.gpl ; then make -f makefile.gpl install; else echo "Skipping GPL"; fi 
	if test -e makefile.rbf; then make -f makefile.rbf install; else echo "Skipping RBF"; fi 
	if test -e makefile.nn; then make -f makefile.nn install; else echo "Skipping NN"; fi 
	if test -e makefile.splines; then make -f makefile.splines install; else echo "Skipping SPLINES"; fi 
	if test -e $(DSTDIR)/install_2parma; then \
		mkdir -p $(IMAGE)/prototypes; \
		mkdir -p $(IMAGE)/prototypes/2parma/; \
		mkdir -p $(IMAGE)/prototypes/2parma/d3.3.1; \
		tar --directory $(SRCDIR)/../use_cases/2parma/d3.3.1/.. --exclude="*.svn*" -c -f - d3.3.1 | (cd $(IMAGE)/prototypes/2parma; tar xfp -) ; \
		mkdir -p $(IMAGE)/prototypes/2parma/d3.3.2; \
		tar --directory $(SRCDIR)/../use_cases/2parma/d3.3.2/.. --exclude="*.svn*" -c -f - d3.3.2 | (cd $(IMAGE)/prototypes/2parma; tar xfp -) ; \
		else echo "Skipping 2PARMA D3.3 prototypes"; fi 
	if test -e $(DSTDIR)/memtrace_ds.xml; then \
		mkdir -p $(IMAGE)/use_cases/2parma/hhi; \
	        install -m $(BINR) $(DSTDIR)/memtrace_ds.xml $(IMAGE)/use_cases/2parma/hhi ; \
	        install -m $(BINR) $(SRCDIR)/../use_cases/2parma/hhi/*.pl $(IMAGE)/use_cases/2parma/hhi ; \
	        install -m $(BINR) $(SRCDIR)/../use_cases/2parma/hhi/*.*scr $(IMAGE)/use_cases/2parma/hhi ; \
	        install -m $(BINR) $(SRCDIR)/../use_cases/2parma/hhi/makefile $(IMAGE)/use_cases/2parma/hhi ; \
		else echo "Skipping HHI use case"; fi 
	if test -e $(DSTDIR)/m3build; then \
		mkdir -p $(IMAGE) ; \
		mkdir -p $(IMAGE)/tools ; \
		mkdir -p $(IMAGE)/tools/m3explorer ; \
		cd $(DSTDIR)/m3build && $(SRCDIR)/../tools/m3explorer/m3explorer/configure --image=$(IMAGE)/tools/m3explorer && make install ; fi 
	

gnuplot:
	mkdir -p $(DSTDIR)/bg  
	cd $(DSTDIR)/bg && tar xzf $(SRCDIR)/../gpl/gnuplot-4.2.4.tar.gz 
	cd $(DSTDIR)/bg && gnuplot-4.2.4/configure 
	cd $(DSTDIR)/bg && make install
